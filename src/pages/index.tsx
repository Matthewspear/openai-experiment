import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";
import {
  ArrowSmallRightIcon,
  ExclamationCircleIcon,
} from "@heroicons/react/24/outline";

import Image from "next/image";
import { api } from "../utils/api";
import { FormEvent, useState } from "react";
import { Loader } from "../components/Loader";

const Home: NextPage = () => {
  const promptMutation = api.ai.prompt.useMutation();

  const [prompt, setPrompt] = useState(
    "Write a description for a website experimenting with the OpenAI API"
  );

  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    console.log("Submit");

    promptMutation.mutate({
      text: prompt,
    });
  };

  return (
    <>
      <Head>
        <title>OpenAI Experiments</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className="relative h-screen bg-cover bg-center">
          <Image
            src="/background.jpg"
            alt="Background image"
            width={1920}
            height={1080}
            className="absolute inset-0 h-full w-full object-cover"
          />
          <div className="absolute inset-0 z-10 flex h-full flex-col items-center">
            <h1 className="px-4 pt-16 text-5xl font-extrabold tracking-tight text-slate-900 sm:text-[5rem]">
              OpenAI
              <br />
              Experiments
            </h1>
            <form onSubmit={handleSubmit} className="">
              <div className="mt-12 flex h-10 gap-1 rounded-full bg-white pl-6 pr-1 align-middle shadow-md sm:h-14">
                <input
                  className="text-md sm:text-md w-[400px] border-0 bg-transparent  outline-none ring-0 sm:w-[550px]"
                  placeholder="Prompt goes here..."
                  name="prompt"
                  id="prompt"
                  value={prompt}
                  onChange={(e) => setPrompt(e.target.value)}
                />
                <button
                  className="my-1 hidden rounded-full bg-gradient-to-b from-[#797EEE] to-[#5761EB] px-3 hover:opacity-90 sm:block sm:px-6"
                  type="submit"
                  name="try"
                  id="try"
                >
                  <div className="flex items-center gap-1">
                    <p className="font-medium text-white sm:text-lg sm:tracking-wide">
                      Try
                    </p>
                    <ArrowSmallRightIcon className="h-6 w-6 text-white" />
                  </div>
                </button>
              </div>
              <button
                className="mt-2 grid h-10 w-full place-items-center rounded-full bg-gradient-to-b from-[#797EEE] to-[#5761EB] px-3 hover:opacity-90 sm:hidden sm:px-6"
                type="submit"
                value="Subscribe"
                name="member[subscribe]"
                id="member_submit"
              >
                <div className="flex items-center gap-1">
                  <p className="font-medium text-white sm:text-lg sm:tracking-wide">
                    Try
                  </p>
                  <ArrowSmallRightIcon className="h-6 w-6 text-white" />
                </div>
              </button>
            </form>

            {promptMutation.isLoading && <Loader />}
            {promptMutation.data && promptMutation.data.error && (
              <div className=" mt-8 flex w-[400px] flex-row place-items-center items-center rounded-lg bg-white shadow-lg sm:w-[550px]">
                <ExclamationCircleIcon className="my-4 mr-4 ml-4 h-6 w-6 text-red-500" />
                <p className="h-6">
                  {promptMutation.data.error?.message ||
                    JSON.stringify(promptMutation.data.error)}
                </p>
              </div>
            )}
            {!promptMutation.isLoading &&
              promptMutation.data &&
              !promptMutation.data.error && (
                <div className="prose prose-slate mt-8 w-[400px] rounded-lg bg-white shadow-lg sm:w-[550px]">
                  <p className=" p-4">{promptMutation.data.result}</p>
                </div>
              )}

            <div className="grow" />
            <Component />
            {/* <div>
              <Link href="/prompting">
                <p>1. Prompting</p>
              </Link>
            </div> */}
          </div>
        </div>
      </main>
    </>
  );
};

export function Component() {
  const { data: session } = useSession();
  if (session) {
    return (
      <>
        <pre className=" my-4 rounded-lg bg-white/30 p-4 backdrop-blur-md">
          {JSON.stringify(session, null, 2)}
        </pre>
        Signed in as {session.user.email} <br />
        <button className="pb-4" onClick={() => void signOut()}>
          Sign out
        </button>
      </>
    );
  }
  return (
    <>
      Not signed in <br />
      <button onClick={() => void signIn()}>Sign in</button>
    </>
  );
}

export default Home;
